-- Kanistay Key Validator v2.2 (Gelişmiş Mesaj ve Durum Yönetimi)
-- Debug Sistemi Entegreli

local WORKER_URL = "https://kanistay.workers.dev"

local validated = false
local isBlacklisted = false

-- Debug modu (true/false)
local DEBUG_MODE = true

local messages = {
    blacklisted = "You are banned from using this system.",
    premium = "Welcome back, premium user!",
    validated = "System is ready for key validation.",
    already_used = "This key is already used by another device.",
    invalid = "Invalid or expired key.",
    error = "An error occurred during validation.",
    unknown = "An unexpected error occurred.",
    empty_key = "Please enter a key before validating."
}

function SetValidatorMessage(status, msg)
    messages[status] = msg
end

local function debugPrint(message, data)
    if DEBUG_MODE then
        print("[DEBUG] " .. message)
        if data then
            print("[DEBUG DATA] " .. tostring(data))
        end
    end
end

local function getHWID()
    local hwid = ""
    pcall(function()
        hwid = game:GetService("RbxAnalyticsService"):GetClientId()
    end)
    debugPrint("HWID obtained: " .. hwid)
    return hwid
end

local function showNotification(title, message, duration)
    local StarterGui = game:GetService("StarterGui")
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = message,
        Duration = duration or 3
    })
end

local function callWorker(hwid, key)
    local HttpService = game:GetService("HttpService")
    local requestData = {
        action = "validate",
        hwid = hwid,
        key = key
    }
    
    debugPrint("Sending request to worker:", WORKER_URL)
    debugPrint("Request data:", HttpService:JSONEncode(requestData))
    
    local success, response = pcall(function()
        return request({
            Url = WORKER_URL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(requestData)
        })
    end)
    
    if success then
        debugPrint("Request successful, Status Code: " .. response.StatusCode)
        debugPrint("Status Message: " .. response.StatusMessage)
        debugPrint("Success: " .. tostring(response.Success))
        debugPrint("Response Body: " .. response.Body)
        debugPrint("Full response table: " .. HttpService:JSONEncode(response))
        local isSuccess = response.Success or response.success or (response.StatusCode >= 200 and response.StatusCode < 300)
        if isSuccess then
            local responseData = HttpService:JSONDecode(response.Body)
            debugPrint("Parsed response:", HttpService:JSONEncode(responseData))
            return responseData
        else
            debugPrint("Request failed - Success: false")
            debugPrint("Status Code: " .. response.StatusCode)
            debugPrint("Status Message: " .. response.StatusMessage)
            debugPrint("Response Body: " .. response.Body)
            return { status = "error", message = "HTTP request failed: " .. response.StatusCode .. " - " .. response.StatusMessage }
        end
    else
        debugPrint("PCall failed: " .. tostring(response))
        warn("Worker request failed:", response and response.StatusCode or "Unknown error")
        return { status = "error", message = "Network error: " .. tostring(response) }
    end
end

local Validator = {}

function Validator.Setup(onValidated)
    debugPrint("=== SETUP STARTED ===")
    local hwid = getHWID()
    local result = callWorker(hwid, nil)
    
    debugPrint("Setup result status: " .. (result.status or "nil"))
    debugPrint("Setup result message: " .. (result.message or "nil"))
    
    if result.status == "blacklisted" then
        isBlacklisted = true
        debugPrint("User is blacklisted")
        showNotification("Banned", messages.blacklisted, 5)
        return true
    elseif result.status == "premium" then
        validated = true
        debugPrint("User is premium")
        showNotification("Premium Access", messages.premium, 3)
        if onValidated then onValidated() end
        return true
    elseif result.status == "validated" then
        validated = true
        debugPrint("User validated successfully")
        showNotification("Setup Complete", messages.validated, 3)
        if onValidated then onValidated() end
        return true
    else
        debugPrint("Setup completed with unknown status: " .. (result.status or "nil"))
        showNotification("Setup Complete", messages.validated, 3)
        return true
    end
end

function Validator.ValidateKey(key, onValidated)
    debugPrint("=== VALIDATE KEY STARTED ===")
    debugPrint("Key to validate: " .. (key or "nil"))
    
    if isBlacklisted then
        debugPrint("User is blacklisted, blocking validation")
        showNotification("Banned", messages.blacklisted, 5)
        return true
    end
    if not key or key == "" then
        debugPrint("Empty key provided")
        showNotification("Empty Key", messages.empty_key, 3)
        return true
    end
    local hwid = getHWID()
    local result = callWorker(hwid, key)
    
    debugPrint("ValidateKey result status: " .. (result.status or "nil"))
    debugPrint("ValidateKey result message: " .. (result.message or "nil"))
    
    if result.status == "blacklisted" then
        isBlacklisted = true
        debugPrint("User became blacklisted during validation")
        showNotification("Banned", messages.blacklisted, 5)
        return true
    elseif result.status == "premium" then
        validated = true
        debugPrint("User validated as premium")
        showNotification("Premium Access", messages.premium, 3)
        if onValidated then onValidated() end
        return true
    elseif result.status == "already_used" then
        debugPrint("Key already used by another device")
        showNotification("Key Already Used", messages.already_used, 4)
        return true
    elseif result.status == "invalid" then
        debugPrint("Key is invalid or expired")
        showNotification("Invalid Key", messages.invalid, 4)
        return true
    elseif result.status == "validated" then
        validated = true
        debugPrint("Key validated successfully")
        showNotification("Key Validated", messages.validated, 3)
        if onValidated then onValidated() end
        return true
    elseif result.status == "error" then
        debugPrint("Error occurred during validation: " .. (result.message or "unknown"))
        showNotification("Error", messages.error, 4)
        return true
    else
        debugPrint("Unknown status received: " .. (result.status or "nil"))
        showNotification("Unknown Error", messages.unknown, 4)
        return true
    end
end

function Validator.IsValidated()
    return validated
end

function Validator.IsBlacklisted()
    return isBlacklisted
end

function Validator.SetMessage(status, msg)
    SetValidatorMessage(status, msg)
end

function Validator.ResetValidation()
    validated = false
    isBlacklisted = false
    debugPrint("Validation reset")
end

-- Debug fonksiyonları
function Validator.SetDebugMode(enabled)
    DEBUG_MODE = enabled
    debugPrint("Debug mode: " .. tostring(enabled))
end

function Validator.GetDebugMode()
    return DEBUG_MODE
end

return Validator
