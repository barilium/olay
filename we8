-- KeyGuardian Validator
-- Bu dosya Roblox'ta √ßalƒ±≈üƒ±r ve KeyGuardian Brain System ile ileti≈üim kurar

local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local Validator = {}

-- Configuration
local BRAIN_URL = "https://jovial-snickerdoodle-3c151c.netlify.app" -- Brain system URL'ini buraya koy
local SYSTEM_TOKEN = nil -- Bu token system.lua'dan gelecek

-- Core Functions
local function generateHWID()
    -- Ger√ßek HWID alma logic'i buraya gelecek
    -- Bu √∂rnek i√ßin random bir HWID generate ediyoruz
    local player = Players.LocalPlayer
    local userId = player.UserId
    local placeId = game.PlaceId
    
    -- Basit bir HWID combine etme
    local hwid = "ROBLOX_" .. userId .. "_" .. placeId .. "_" .. tick()
    return hwid
end

local function makeRequest(endpoint, data)
    local url = BRAIN_URL .. endpoint
    
    local success, response = pcall(function()
        return HttpService:PostAsync(url, HttpService:JSONEncode(data), Enum.HttpContentType.ApplicationJson)
    end)
    
    if success then
        local decoded = HttpService:JSONDecode(response)
        return decoded
    else
        warn("üö® Brain connection failed: " .. tostring(response))
        return {
            success = false,
            message = "Connection failed"
        }
    end
end

local function sendCoreMessage(message, messageType)
    messageType = messageType or "info"
    
    local colors = {
        success = "‚úÖ",
        error = "‚ùå", 
        warning = "‚ö†Ô∏è",
        info = "‚ÑπÔ∏è"
    }
    
    local prefix = colors[messageType] or "‚ÑπÔ∏è"
    print(prefix .. " KeyGuardian: " .. message)
    
    -- Eƒüer System.lua ile connection varsa, mesajƒ± g√∂nder
    if _G.SystemReceiveMessage then
        _G.SystemReceiveMessage(message, messageType)
    end
end

-- Token Setup Fonksiyonu
function Validator.Setup(systemToken, loaderFunction)
    if not systemToken then
        sendCoreMessage("No token provided", "error")
        return false
    end
    
    sendCoreMessage("Validating system token...", "info")
    
    -- Token'ƒ± brain'e g√∂nder ve doƒürula
    local tokenResponse = makeRequest("/validate-token", {
        token = systemToken
    })
    
    if tokenResponse.success then
        SYSTEM_TOKEN = systemToken
        _G.KeyGuardianLoaderFunction = loaderFunction
        sendCoreMessage("Token validated successfully", "success")
        return true
    else
        sendCoreMessage("Invalid token: " .. tokenResponse.message, "error")
        return false
    end
end

-- Ana Validation Fonksiyonu
function Validator.StartValidation()
    if not SYSTEM_TOKEN then
        sendCoreMessage("Token not set. Call Setup first.", "error")
        return false
    end
    
    sendCoreMessage("Starting validation process...", "info")
    
    -- 1. HWID'yi al
    local hwid = generateHWID()
    sendCoreMessage("Generated HWID: " .. hwid, "info")
    
    -- 2. HWID'yi brain'e g√∂nder
    local hwidResponse = makeRequest("/validate-hwid", {
        hwid = hwid,
        token = SYSTEM_TOKEN
    })
    
    if not hwidResponse.success then
        if hwidResponse.status == "banned" then
            sendCoreMessage("User banned", "error")
            Validator.BlockUser()
            return false
        else
            sendCoreMessage("Validation failed: " .. hwidResponse.message, "error")
            return false
        end
    end
    
    -- 3. Response'a g√∂re aksiyon al
    if hwidResponse.status == "validated" then
        -- Premium user, direkt validate et
        sendCoreMessage("Premium user validated!", "success")
        Validator.ValidateUser(hwid, hwidResponse.data.key, "premium")
        return true
        
    elseif hwidResponse.status == "waiting_key" then
        -- Key bekleme moduna ge√ß
        sendCoreMessage("Ready for key input", "info")
        Validator.WaitForKey(hwid)
        return true
        
    else
        sendCoreMessage("Unknown response status: " .. hwidResponse.status, "error")
        return false
    end
end

function Validator.WaitForKey(hwid)
    sendCoreMessage("Waiting for key input...", "info")
    
    -- Global function key giri≈üi i√ßin
    _G.ValidatorReceiveKey = function(key)
        if not key or key == "" then
            sendCoreMessage("Empty key provided", "error")
            return
        end
        
        sendCoreMessage("Validating key: " .. key, "info")
        
        -- Key'i brain'e g√∂nder
        local keyResponse = makeRequest("/validate-key", {
            hwid = hwid,
            key = key,
            token = SYSTEM_TOKEN
        })
        
        if keyResponse.success then
            if keyResponse.status == "validated" then
                sendCoreMessage("Key validated successfully!", "success")
                Validator.ValidateUser(hwid, key, keyResponse.data.type)
            else
                sendCoreMessage("Key validation failed: " .. keyResponse.message, "error")
            end
        else
            if keyResponse.status == "banned" then
                sendCoreMessage("User banned", "error")
                Validator.BlockUser()
            elseif keyResponse.status == "key_already_used" then
                sendCoreMessage("Key already used", "error")
            elseif keyResponse.status == "key_invalid" then
                sendCoreMessage("Key expired or invalid", "error")
            else
                sendCoreMessage("Key validation failed: " .. keyResponse.message, "error")
            end
        end
    end
    
    -- Key input UI'sini g√∂ster (System.lua'ya sinyal g√∂nder)
    if _G.SystemShowKeyInput then
        _G.SystemShowKeyInput()
    end
end

function Validator.ValidateKey(systemToken, key, loaderFunction)
    if not SYSTEM_TOKEN or SYSTEM_TOKEN ~= systemToken then
        sendCoreMessage("Invalid system token", "error")
        return
    end
    
    if _G.ValidatorReceiveKey then
        _G.ValidatorReceiveKey(key)
    else
        sendCoreMessage("Validator not ready for key input", "error")
    end
end

function Validator.ValidateUser(hwid, key, keyType)
    sendCoreMessage("User validated with " .. keyType .. " key", "success")
    
    -- Global validation state'i set et
    _G.KeyGuardianValidated = true
    _G.KeyGuardianHWID = hwid
    _G.KeyGuardianKey = key
    _G.KeyGuardianKeyType = keyType
    
    -- Loader'ƒ± √ßalƒ±≈ütƒ±r
    if _G.KeyGuardianLoaderFunction then
        _G.KeyGuardianLoaderFunction()
    end
    
    -- System.lua'ya validation signal'i g√∂nder
    if _G.SystemUserValidated then
        _G.SystemUserValidated(hwid, key, keyType)
    end
end

function Validator.BlockUser()
    sendCoreMessage("User blocked - disconnecting", "error")
    
    -- Global block state'i set et
    _G.KeyGuardianBlocked = true
    
    -- System.lua connection'ƒ±nƒ± kes
    _G.SystemReceiveMessage = nil
    _G.SystemUserValidated = nil
    _G.SystemShowKeyInput = nil
    _G.ValidatorReceiveKey = nil
    
    -- Kullanƒ±cƒ±yƒ± oyundan at
    local player = Players.LocalPlayer
    if player then
        player:Kick("KeyGuardian: User banned")
    end
end

-- Validation durumunu kontrol et
function Validator.IsValidated()
    return _G.KeyGuardianValidated == true
end

function Validator.IsBlocked()
    return _G.KeyGuardianBlocked == true
end

-- Test fonksiyonu
function Validator.TestConnection()
    local response = makeRequest("/health", {})
    if response.success then
        sendCoreMessage("Brain connection successful", "success")
        return true
    else
        sendCoreMessage("Brain connection failed", "error")
        return false
    end
end

-- Global access
_G.KeyGuardianValidator = Validator

return Validator
